package org.example.structural.pratice.bridge.exercise1;

/*
üèóÔ∏è Ex 1 ‚Äî Relat√≥rios em m√∫ltiplos formatos

Contexto:
Um sistema precisa gerar relat√≥rios em PDF, HTML e CSV.

Desafio:
Crie a abstra√ß√£o Report (classe abstrata) e a implementa√ß√£o ReportFormat (interface).
Subclasses: SalesReport, InventoryReport usam diferentes implementa√ß√µes (PDFReportFormat, HTMLReportFormat).

Vantagem:
Separa√ß√£o entre ‚Äúo que √© o relat√≥rio‚Äù e ‚Äúcomo ele √© gerado‚Äù.
 */

import org.example.structural.pratice.bridge.exercise1.concreteImplementation.CSVReportFormat;
import org.example.structural.pratice.bridge.exercise1.concreteImplementation.HTMLReportFormat;
import org.example.structural.pratice.bridge.exercise1.concreteImplementation.PDFReportFormat;
import org.example.structural.pratice.bridge.exercise1.concreteSubClasses.InventoryReport;
import org.example.structural.pratice.bridge.exercise1.concreteSubClasses.SalesReport;

public class Main {
    public static void main(String[] args) {
        Report salesPDF = new SalesReport(new PDFReportFormat());
        salesPDF.generateReport();

        Report salesHTML = new SalesReport(new HTMLReportFormat());
        salesHTML.generateReport();

        Report inventoryCSV = new InventoryReport(new CSVReportFormat());
        inventoryCSV.generateReport();
    }
}

/*
Explica√ß√£o

Report ‚Üí abstra√ß√£o gen√©rica (define o tipo do relat√≥rio).
ReportFormat ‚Üí interface de implementa√ß√£o (define o formato de sa√≠da).
SalesReport, InventoryReport ‚Üí concretizam a abstra√ß√£o.
PDFReportFormat, HTMLReportFormat, CSVReportFormat ‚Üí concretizam a implementa√ß√£o.

O Bridge permite combinar qualquer Report com qualquer ReportFormat sem alterar c√≥digo existente.

 */